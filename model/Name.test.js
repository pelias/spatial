const tap = require('tap')
const Name = require('./Name')

// constructor
tap.test('constructor: empty', (t) => {
  let n = new Name()
  t.equal(n.lang, undefined)
  t.equal(n.tag, undefined)
  t.equal(n.abbr, undefined)
  t.equal(n.name, undefined)
  t.end()
})
tap.test('constructor: lang only', (t) => {
  let n = new Name('lang')
  t.equal(n.lang, 'lang')
  t.equal(n.tag, undefined)
  t.equal(n.abbr, undefined)
  t.equal(n.name, undefined)
  t.end()
})
tap.test('constructor: tag only', (t) => {
  let n = new Name(undefined, 'tag')
  t.equal(n.lang, undefined)
  t.equal(n.tag, 'tag')
  t.equal(n.abbr, undefined)
  t.equal(n.name, undefined)
  t.end()
})
tap.test('constructor: abbr only', (t) => {
  let n = new Name(undefined, undefined, true)
  t.equal(n.lang, undefined)
  t.equal(n.tag, undefined)
  t.equal(n.abbr, true)
  t.equal(n.name, undefined)
  t.end()
})
tap.test('constructor: name only', (t) => {
  let n = new Name(undefined, undefined, undefined, 'example')
  t.equal(n.lang, undefined)
  t.equal(n.tag, undefined)
  t.equal(n.abbr, undefined)
  t.equal(n.name, 'example')
  t.end()
})
tap.test('constructor: all properties', (t) => {
  let n = new Name('lang', 'tag', false, 'example')
  t.equal(n.lang, 'lang')
  t.equal(n.tag, 'tag')
  t.equal(n.abbr, false)
  t.equal(n.name, 'example')
  t.end()
})

// setLang
tap.test('setLang: undefined', (t) => {
  let n = new Name()
  n.setLang(undefined)
  t.equal(n.lang, undefined)
  t.end()
})
tap.test('setLang: array', (t) => {
  let n = new Name()
  n.setLang([])
  t.equal(n.lang, undefined)
  t.end()
})
tap.test('setLang: object', (t) => {
  let n = new Name()
  n.setLang({})
  t.equal(n.lang, undefined)
  t.end()
})
tap.test('setLang: nil object', (t) => {
  let n = new Name()
  n.setLang(null)
  t.equal(n.lang, undefined)
  t.end()
})
tap.test('setLang: number', (t) => {
  let n = new Name()
  n.setLang(1)
  t.equal(n.lang, undefined)
  t.end()
})
tap.test('setLang: nil number', (t) => {
  let n = new Name()
  n.setLang(NaN)
  t.equal(n.lang, undefined)
  t.end()
})
tap.test('setLang: string', (t) => {
  let n = new Name()
  n.setLang('test')
  t.equal(n.lang, 'test')
  t.end()
})
tap.test('setLang: nil string', (t) => {
  let n = new Name()
  n.setLang('')
  t.equal(n.lang, '')
  t.end()
})

// setTag
tap.test('setTag: undefined', (t) => {
  let n = new Name()
  n.setTag(undefined)
  t.equal(n.tag, undefined)
  t.end()
})
tap.test('setTag: array', (t) => {
  let n = new Name()
  n.setTag([])
  t.equal(n.tag, undefined)
  t.end()
})
tap.test('setTag: object', (t) => {
  let n = new Name()
  n.setTag({})
  t.equal(n.tag, undefined)
  t.end()
})
tap.test('setTag: nil object', (t) => {
  let n = new Name()
  n.setTag(null)
  t.equal(n.tag, undefined)
  t.end()
})
tap.test('setTag: number', (t) => {
  let n = new Name()
  n.setTag(1)
  t.equal(n.tag, undefined)
  t.end()
})
tap.test('setTag: nil number', (t) => {
  let n = new Name()
  n.setTag(NaN)
  t.equal(n.tag, undefined)
  t.end()
})
tap.test('setTag: string', (t) => {
  let n = new Name()
  n.setTag('test')
  t.equal(n.tag, 'test')
  t.end()
})
tap.test('setTag: nil string', (t) => {
  let n = new Name()
  n.setTag('')
  t.equal(n.tag, '')
  t.end()
})

// setAbbr
tap.test('setAbbr: undefined', (t) => {
  let n = new Name()
  n.setAbbr(undefined)
  t.equal(n.abbr, undefined)
  t.end()
})
tap.test('setAbbr: array', (t) => {
  let n = new Name()
  n.setAbbr([])
  t.equal(n.abbr, undefined)
  t.end()
})
tap.test('setAbbr: object', (t) => {
  let n = new Name()
  n.setAbbr({})
  t.equal(n.abbr, undefined)
  t.end()
})
tap.test('setAbbr: nil object', (t) => {
  let n = new Name()
  n.setAbbr(null)
  t.equal(n.abbr, undefined)
  t.end()
})
tap.test('setAbbr: number', (t) => {
  let n = new Name()
  n.setAbbr(1)
  t.equal(n.abbr, undefined)
  t.end()
})
tap.test('setAbbr: nil number', (t) => {
  let n = new Name()
  n.setAbbr(NaN)
  t.equal(n.abbr, undefined)
  t.end()
})
tap.test('setAbbr: string', (t) => {
  let n = new Name()
  n.setAbbr('test')
  t.equal(n.abbr, undefined)
  t.end()
})
tap.test('setAbbr: nil string', (t) => {
  let n = new Name()
  n.setAbbr('')
  t.equal(n.abbr, undefined)
  t.end()
})
tap.test('setAbbr: true', (t) => {
  let n = new Name()
  n.setAbbr(true)
  t.equal(n.abbr, true)
  t.end()
})
tap.test('setAbbr: false', (t) => {
  let n = new Name()
  n.setAbbr(false)
  t.equal(n.abbr, false)
  t.end()
})

// setName
tap.test('setName: undefined', (t) => {
  let n = new Name()
  n.setName(undefined)
  t.equal(n.name, undefined)
  t.end()
})
tap.test('setName: array', (t) => {
  let n = new Name()
  n.setName([])
  t.equal(n.name, undefined)
  t.end()
})
tap.test('setName: object', (t) => {
  let n = new Name()
  n.setName({})
  t.equal(n.name, undefined)
  t.end()
})
tap.test('setName: nil object', (t) => {
  let n = new Name()
  n.setName(null)
  t.equal(n.name, undefined)
  t.end()
})
tap.test('setName: number', (t) => {
  let n = new Name()
  n.setName(1)
  t.equal(n.name, undefined)
  t.end()
})
tap.test('setName: nil number', (t) => {
  let n = new Name()
  n.setName(NaN)
  t.equal(n.name, undefined)
  t.end()
})
tap.test('setName: string', (t) => {
  let n = new Name()
  n.setName('test')
  t.equal(n.name, 'test')
  t.end()
})
tap.test('setName: nil string', (t) => {
  let n = new Name()
  n.setName('')
  t.equal(n.name, '')
  t.end()
})

// isValid
tap.test('inValid: empty', (t) => {
  let n = new Name()
  t.notOk(n._isValid())
  t.end()
})
tap.test('inValid: lang only', (t) => {
  let n = new Name('lang')
  t.notOk(n._isValid())
  t.end()
})
tap.test('inValid: tag only', (t) => {
  let n = new Name(undefined, 'tag')
  t.notOk(n._isValid())
  t.end()
})
tap.test('inValid: abbr only', (t) => {
  let n = new Name(undefined, undefined, true)
  t.notOk(n._isValid())
  t.end()
})
tap.test('inValid: name only', (t) => {
  let n = new Name(undefined, undefined, undefined, 'example')
  t.notOk(n._isValid())
  t.end()
})
tap.test('inValid: all properties', (t) => {
  let n = new Name('lang', 'tag', false, 'example')
  t.ok(n._isValid())
  t.end()
})
